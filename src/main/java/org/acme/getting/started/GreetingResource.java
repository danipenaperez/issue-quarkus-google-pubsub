package org.acme.getting.started;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.UUID;
import java.util.concurrent.TimeUnit;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import com.google.api.core.ApiFuture;
import com.google.api.core.ApiFutureCallback;
import com.google.api.core.ApiFutures;
import com.google.cloud.pubsub.v1.Publisher;
import com.google.common.util.concurrent.MoreExecutors;
import com.google.protobuf.ByteString;
import com.google.pubsub.v1.ProjectTopicName;
import com.google.pubsub.v1.PubsubMessage;


@Path("/hello")
public class GreetingResource {

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return "hello";
    }
    
    String topicName = "test-topic-2";
	String projectName = "googleProjectI";

    public void publishTopic() throws FileNotFoundException, IOException, InterruptedException {
		ProjectTopicName topic = ProjectTopicName.of(projectName, topicName);
		Publisher publisher = null;
		try {
		  publisher = Publisher.newBuilder(topic).build();
		  String messageContent = "autogenerated message "+UUID.randomUUID().toString();
		  System.out.println("Publicando "+messageContent);
		  ByteString data = ByteString.copyFromUtf8(messageContent);
		  PubsubMessage pubsubMessage = PubsubMessage.newBuilder().setData(data).build();
		  ApiFuture<String> messageIdFuture = publisher.publish(pubsubMessage);
		  ApiFutures.addCallback(messageIdFuture, new ApiFutureCallback<String>() {
		    public void onSuccess(String messageId) {
		      System.out.println("published with message id: " + messageId);
		    }

		    public void onFailure(Throwable t) {
		      System.out.println("failed to publish: " + t);
		    }
		  }, MoreExecutors.directExecutor());
		  //...
		} finally {
		  if (publisher != null) {
		    publisher.shutdown();
		    publisher.awaitTermination(1, TimeUnit.MINUTES);
		  }
		}
	}

    
}